call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'

Plug 'tpope/vim-sensible'
Plug 'junegunn/vim-easy-align'
Plug 'bling/vim-airline'
Plug 'terryma/vim-multiple-cursors'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-surround'

" Theme
Plug 'altercation/vim-colors-solarized'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'kien/ctrlp.vim', { 'on': 'CtrlP' }
Plug 'fatih/vim-go', { 'for':  'go', 'tag': '*', 'do': ':GoInstallBinaries' }
Plug 'ElmCast/elm-vim', { 'for':  'elm' }
Plug 'nsf/gocode', { 'for': 'go', 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'tpope/vim-fireplace', { 'for':  ['clj', 'cljs', 'edn'] }
Plug 'tell-k/vim-autopep8', { 'for': 'python' }

" JavaScript specific
"Plug 'ternjs/tern_for_vim', { 'for': 'javascript' }

" Idris specific
"Plug 'idris-hackers/idris-vim'

" APIBlueprint
"Plug 'kylef/apiblueprint.vim', { 'for': 'apiblueprint' }

" Erlang specific
"Plug 'vim-erlang/vim-erlang-runtime', { 'for': ['erl', 'hrl'] }
"Plug 'vim-erlang/erlang-motions.vim', { 'for': ['erl', 'hrl'] }
"Plug 'vim-erlang/vim-erlang-omnicomplete'
"Plug 'vim-erlang/vim-erlang-tags'

" Rust
"Plug 'rust-lang/rust.vim'
"Plug 'racer-rust/vim-racer'

" ReasonML
" You must install manually (yet) binnary from here:
" - https://github.com/jaredly/reason-language-server/releases
"Plug 'reasonml-editor/vim-reason-plus'

" Writing
"Plug 'junegunn/goyo.vim'

Plug 'w0rp/ale'
Plug 'editorconfig/editorconfig-vim'
" Plug 'scrooloose/syntastic'
" Plug 'SirVer/ultisnips'
"" Show a VCS diff using Vim's sign column.
Plug 'mhinz/vim-signify'
" Unload/delete/wipe a buffer, keep its window(s), display last accessed buffer(s)
Plug 'vim-scripts/bufkill.vim'

" OpsThingy
" Terraform
Plug 'hashivim/vim-terraform'

" Pandoc - markdown, Latex
Plug 'dhruvasagar/vim-table-mode'
Plug 'vim-pandoc/vim-pandoc-syntax'
augroup pandoc_syntax
    au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
augroup END

" Before on OSX
" install ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
" install brew install caskroom/cask/brew-cask
" install brew install macvim --override-system-vim
" Plug 'Valloric/YouCompleteMe', { 'do': 'git submodule update --init --recursive && ./install.sh --gocode-completer', 'for': ['go'] }
"Plug 'Valloric/YouCompleteMe', { 'do': 'git submodule update --init --recursive && ./install.py --clang-completer --gocode-completer --tern-completer --rust-completer' }
"Plug 'Valloric/YouCompleteMe'
"autocmd! User YouCompleteMe call youcompleteme#Enable()

Plug 'tomtom/tcomment_vim'

" Language server
"Plug 'autozimu/LanguageClient-neovim', {
"    \ 'branch': 'next',
"    \ 'do': 'bash install.sh',
"    \ }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

call plug#end()
" The caveat is that you should *never* use PlugUpgrade
delc PlugUpgrade

set nocompatible               " be iMproved
filetype off                   " required!

" Remove all unwanted whitespaces on save
autocmd BufWritePre * :%s/\r\+$//e " Windows newlines
autocmd BufWritePre * :%s/\s\+$//e
" Turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" Appearance
syntax on
set background=dark
let g:solarized_termcolors=256
color solarized

" set clipboard=unnamedplus " Clipboad as default set to +
set cursorline " Higlight current line
set hidden " When set allow switch between buffers even when buffer have change
set autoindent " Indent the next line similiar to current line
set smartindent " Be smart with indent
set copyindent " Use same indentation characters as current line
set expandtab " Use spaces instead of tabs for indentation
set shiftwidth=4 " Use 4 spaces for indentation
set shiftround  " Round all indentations to multiple of shiftwidth
set tabstop=4   " Set tabs to be equivalent to 4 spaces (fixes retab)
set number      " Set line number
set autoread    " Set to auto read when a file is changed from the outside
set backspace=indent,eol,start " Free the backspace and enable arrow keys and h l to move past the beginning and end of lines
set whichwrap+=<,>,h,l
set showmatch   " Show matching bracets when text indicator is over them
set nowb        " Turn backup off "set nobackup
set noswapfile
set incsearch   " Search before hit enter
set hlsearch    " Highlight search results
set wildmenu    " Show available commands in list
set lazyredraw  " redraw only when we need to.
set number
set relativenumber

" Persistent undo
if version >= 703
    let ud=$HOME . "/.vimundo"

    if !isdirectory(ud)
        call mkdir(ud)
        echo "Created undo directory: " . ud
    endif

    execute "set undodir=" . ud
    set undofile
endif
set undolevels=1000

" Navigation
map } :bnext<CR>
map { :bprevious<CR>
map L :bnext<CR>
map H :bprevious<CR>
nmap mj :m+1<CR>
nmap mk :m-2<CR>
map <leader>p :NERDTreeToggle<CR>
map <c-p> :CtrlP<CR>
map <leader>/ :TComment<CR>
map <leader>? :TCommentInline<CR>

augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter *.js,*.json,*.yml setlocal tabstop=2
    autocmd BufEnter *.js,*.json,*.yml setlocal shiftwidth=2
    autocmd BufEnter *.js,*.json,*.yml setlocal softtabstop=2
augroup END

" vim-airline
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
set laststatus=2

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck', 'go', 'gofmt' ]
let g:syntastic_javascript_checkers = ['eslint', 'flow']
let g:syntastic_javascript_flow_exe = 'flow'

"" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<C-o>"

" vim-multiple-cursors
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_exit_from_insert_mode=0

"" BufKill
map <leader>q :bd<CR>
map <leader>Q :bd!<CR>

"" tern
"autocmd FileType javascript map <Leader>d :TernDef<CR>

"" tidy content
"autocmd Syntax xml nmap <leader>t :.,%!xmllint --format --recover -<CR>

" let g:numbers_exclude = ['unite', 'tagbar', 'startify', 'gundo', 'vimshell', 'w3m', 'goyo']

" fatih/vim-go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_def_mapping_enabled = 0
let g:go_list_type = "quickfix"

" YCM python config
" let g:ycm_python_binary_path = 'python3'
"
" " YCM improvements http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
" set completeopt=longest,menuone
" " nter key will simply select the highlighted menu item, just as <C-Y> does.
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" " open omni completion menu closing previous if open and opening new menu without changing the text
" inoremap <expr> <C-Space> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
"             \ '<C-x><C-o><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'
" " open user completion menu closing previous if open and opening new menu without changing the text
" inoremap <expr> <S-Space> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
"             \ '<C-x><C-u><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'

let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']

" nnoremap <leader>jd :YcmCompleter GoTo<CR>
" nnoremap <leader>jr :YcmCompleter GoToReferences<CR>
" autocmd FileType typescript nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
" show file in nerd tree
nnoremap <leader>n :NERDTreeFind<CR>
autocmd! FileType fzf tnoremap <buffer> <esc> <c-c>

" vim-erlang/vim-erlang-tags
let g:erlang_tags_ignore = ['.eunit']

" look for tern as a global program
let g:tern#command=['tern']

" Rust
let g:racer_experimental_completer = 1

" ALE linters
let g:ale_fix_on_save = 1
let g:ale_fixers = {
    \ '*': ['remove_trailing_lines', 'trim_whitespace'],
    \ 'reason': ['refmt'],
    \ }
let g:ale_linters = {
    \ 'go': ['golangci-lint'],
    \ 'typescript': ['tslint', 'tsserver', 'typecheck']
    \ }

" GoYo config
function! s:goyo_enter()
  set nonumber norelativenumber
endfunction

function! s:goyo_leave()
  set number relativenumber
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" LanguageServer
" let g:LanguageClient_serverCommands = {
"     \ 'reason': '/usr/local/bin/ocaml-language-server',
"     \ }
" let g:deoplete#enable_at_startup = 1

" Remap movement keys
nnoremap j h   " j now moves left
nnoremap k j   " k now moves down
nnoremap l k   " l now moves up
nnoremap ; l   " ; now moves right

" Do the same for visual mode
vnoremap j h
vnoremap k j
vnoremap l k
vnoremap ; l

" And for operator-pending mode (motions like d, y, c)
onoremap j h
onoremap k j
onoremap l k
onoremap ; l
